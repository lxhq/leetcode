/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Integer> res;
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
        res = new ArrayList<>();
        if (root == null) return res;
        res.add(root.val);
        left(root.left);
        leaves(root.left);
        leaves(root.right);
        right(root.right);
        return res;
    }
    
    private void left(TreeNode node) {
        if (node == null || (node.left == null && node.right == null)) return;
        res.add(node.val);
        if (node.left != null) {
            left(node.left);
        } else {
            left(node.right);
        }
    }
    
    private void right(TreeNode node) {
        if (node == null || (node.left == null && node.right == null)) return;
        if (node.right != null) {
            right(node.right);
        } else {
            right(node.left);
        }
        res.add(node.val);
    }
    
    private void leaves(TreeNode node) {
        if (node == null) return;
        if (node.left == null && node.right == null) {
            res.add(node.val);
        }
        leaves(node.left);
        leaves(node.right);
    }
    
}
