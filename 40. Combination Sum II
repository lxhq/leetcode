class Solution {
    private List<List<Integer>> result = new ArrayList<>();
    private List<Integer> select = new ArrayList<>();
    private boolean[] visited;
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        visited = new boolean[candidates.length];
        helper(candidates, target, 0, 0);
        return result;
    }
    
    private void helper(int[] candidates, int target, int sum, int pos) {
        if (sum == target) {
            result.add(new ArrayList(select));
            return;
        }
        if (pos == candidates.length || sum > target) {
            return;
        }

        for (int i = pos; i < candidates.length; i++) {
            if (i > 0 && candidates[i] == candidates[i - 1] && !visited[i - 1]) {
                continue;
            }
            select.add(candidates[i]);
            visited[i] = true;
            helper(candidates, target, sum + candidates[i], i + 1);
            visited[i] = false;
            select.remove(select.size() - 1);
        }
    }
}
