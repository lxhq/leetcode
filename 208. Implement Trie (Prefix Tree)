class Trie {
  Trie[] child = new Trie[26];
  String word = "";
  /** Initialize your data structure here. */
  public Trie() {

  }

  /** Inserts a word into the trie. */
  public void insert(String word) {
    Trie node = this;
    for (int i = 0; i < word.length(); i++) {
      Character character = word.charAt(i);
      if (node.child[character - 'a'] == null) {
        node.child[character - 'a'] = new Trie();
        node = node.child[character - 'a'];
      } else {
        node = node.child[character - 'a'];
      }
    }
    node.word = word;
  }

  /** Returns if the word is in the trie. */
  public boolean search(String word) {
      Trie node = this;
      for (int i = 0; i < word.length(); i++) {
          if (node.child[word.charAt(i) - 'a'] == null) {
              return false;
          } else {
              node = node.child[word.charAt(i) - 'a'];
          }
      }
      return (node.word.equals(word));
  }

  /** Returns if there is any word in the trie that starts with the given prefix. */
  public boolean startsWith(String prefix) {
    Trie node = this;
    for (int i = 0; i < prefix.length(); i++) {
      if (node.child[prefix.charAt(i) - 'a'] == null) {
        return false;
      } else {
        node = node.child[prefix.charAt(i) - 'a'];
      }
    }
    return true;
  }
}
