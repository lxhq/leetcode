class Solution {
    private List<List<Integer>> result = new ArrayList<>();
    private List<Integer> select = new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        helper(candidates, target, 0, 0);
        return result;
    }
    
    void helper(int[] candidates, int target, int pos, int sum) {
        if (sum == target) {
            List<Integer> set = new ArrayList(select);
            result.add(set);
            return;
        }
        if (pos == candidates.length || sum > target) {
            return;
        }
        for (int i = pos; i < candidates.length; i++) {
            select.add(candidates[i]);
            helper(candidates, target, i, sum + candidates[i]);
            select.remove(select.size() - 1);
        }
    }
}
