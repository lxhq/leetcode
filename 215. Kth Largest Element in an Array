class Solution {
    public int findKthLargest(int[] nums, int k) {
        return quickSelect(nums, 0, nums.length - 1, nums.length - k);
    }
    
   private int quickSelect(int[] nums, int begin, int end, int k) {
    if (begin >= end) {
      return nums[begin];
    }
    int pointer = end;
    int pivot = begin;
    while (pointer != pivot) {
      if (pointer > pivot) {
        if (nums[pivot] > nums[pointer]) {
          swap(nums, pivot, pointer);
          int temp = pointer;
          pointer = pivot;
          pivot = temp;
          pointer++;
        } else {
          pointer--;
        }
      } else {
        if (nums[pivot] < nums[pointer]) {
          swap(nums, pointer, pivot);
          int temp = pointer;
          pointer = pivot;
          pivot = temp;
          pointer--;
        } else {
          pointer++;
        }
      }
    }
    if (pivot == k) {
      return nums[pivot];
    } else if (pivot < k) {
      return quickSelect(nums, pivot + 1, end, k);
    } else {
      return quickSelect(nums, begin, pivot - 1, k);
    }
  }
    
    private void swap(int[] nums, int n1, int n2) {
        int temp = nums[n1];
        nums[n1] = nums[n2];
        nums[n2] = temp;
    }
}
