class Solution {
    private List<List<Integer>> result = new ArrayList<>();
    private List<Integer> select = new ArrayList<>();
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        helper(nums, k, n, 0, 0);
        return result;
    }
    
    private void helper(int[] nums, int k, int n, int sum, int pos) {
        if (select.size() == k && sum == n) {
            result.add(new ArrayList<Integer>(select));
        }
        if (select.size() >= k || pos == nums.length) {
            return;
        }
        
        for (int i = pos; i < nums.length; i++) {
            select.add(nums[i]);
            helper(nums, k, n, sum + nums[i], i + 1);
            select.remove(select.size() - 1);
            
        }
    }
}
