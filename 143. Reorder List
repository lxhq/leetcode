/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if (head == null || head.next == null) return;
        int counter = 0;
        ListNode node = head;
        while (node != null) {
            counter++;
            node = node.next;
        }
        int mid = (counter + 1) / 2;
        node = head;
        for (int i = 0; i < mid - 1; i++) 
            node = node.next;
        ListNode start = node.next;
        node.next = null;
        ListNode reverse = reverseList(null, start);
        
        int k = 0;
        node = head;
        ListNode next = new ListNode(-100);
        while (k < counter) {
            if (k % 2 == 0) {
                next = node.next;
                node.next = reverse;
                node = node.next;
            } else {
                reverse = node.next;
                node.next = next;
                node = node.next;                
            }
            k++;
        }
    }
    
    private ListNode reverseList(ListNode pre, ListNode node) {
        if (node.next == null) {
            node.next = pre;
            return node; 
        } else {
            ListNode next = node.next;
            node.next = pre;
            return reverseList(node, next);
        }
    }
}
