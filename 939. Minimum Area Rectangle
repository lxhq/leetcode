class Solution {
    class Node{
        int x;
        int y;
        Node(int x, int y) {
            this.x = x;
            this.y = y;
        }
        
        @Override
        public boolean equals(Object obj)
        {
            return (((Node) obj).x == this.x)&&(((Node) obj).y == this.y);
        }
        
        @Override
        public int hashCode(){
            return Objects.hash(x,y);
        }
        
    }
    public int minAreaRect(int[][] points) {
        Set<Node> set = new HashSet<>();
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < points.length; i++) {
            set.add(new Node(points[i][0], points[i][1]));
        }
        for (int i = 0; i < points.length; i++) {
            for (int j = i + 1; j < points.length; j++) {
                int x1 = points[i][0];
                int y1 = points[i][1];
                int x2 = points[j][0];
                int y2 = points[j][1];
                Node node1 = new Node(x1, y2);
                Node node2 = new Node(x2, y1);
                if (set.contains(node1) && set.contains(node2)) {
                    int area = Math.abs(x2 - x1) * Math.abs(y2 - y1);
                    if (area == 0) continue;
                    min = Math.min(area, min);
                }
            }
        }
        return min == Integer.MAX_VALUE ? 0 : min;
    }
}
