class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || board[0].length == 0) {
            return false;
        }
        boolean result = false;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                result = result || dfs(board, word, i, j, 0);
            }
        }
        return result;
    }
    
    private boolean dfs(char[][] board, String word, int x, int y, int pos) {
        if (x < 0 || y < 0 || x == board.length || y == board[x].length) return false;
        if (pos == word.length() - 1) {
            if (board[x][y] == word.charAt(pos)) 
                return true;
            else
                return false;
        }
        if (board[x][y] != word.charAt(pos))
            return false;
        board[x][y] ^= 256;
        boolean result = false;
        result =  dfs(board, word, x, y + 1, pos + 1) ||
            dfs(board, word, x, y - 1, pos + 1) ||
            dfs(board, word, x + 1, y, pos + 1) ||
            dfs(board, word, x - 1, y, pos + 1);
        
        board[x][y] ^= 256;
        return result;
    }
}
